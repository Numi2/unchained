name: Release (Windows)

on:
  push:
    branches: [ main ]
  workflow_dispatch:

permissions:
  contents: write

jobs:
  build-and-release:
    name: Build and release Windows .exe
    runs-on: windows-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Rust (stable)
        uses: dtolnay/rust-toolchain@stable

      # Force liboqs to build WITHOUT OpenSSL and ensure a rebuild
      - name: Configure liboqs (disable OpenSSL backend)
        shell: pwsh
        run: |
          # Clear any inherited OpenSSL env vars that could make CMake try to find OpenSSL
          Remove-Item Env:OPENSSL_DIR -ErrorAction SilentlyContinue
          Remove-Item Env:OPENSSL_ROOT_DIR -ErrorAction SilentlyContinue
          Remove-Item Env:OPENSSL_INCLUDE_DIR -ErrorAction SilentlyContinue
          Remove-Item Env:OPENSSL_LIB_DIR -ErrorAction SilentlyContinue
          # oqs-sys build.rs reads LIBOQS_* env vars; pass CMake args via LIBOQS_CMAKE_ARGS
          echo "LIBOQS_CMAKE_ARGS=-DOQS_USE_OPENSSL=OFF -DCMAKE_DISABLE_FIND_PACKAGE_OpenSSL=ON -DOQS_DIST_BUILD=ON -DOQS_BUILD_ONLY_LIB=ON -DOQS_ENABLE_SIG_ML_DSA=ON -DOQS_ENABLE_KEM_ML_KEM=ON" >> $env:GITHUB_ENV
          echo "LIBOQS_NO_PKG_CONFIG=1" >> $env:GITHUB_ENV
          echo "LIBOQS_STATIC=1" >> $env:GITHUB_ENV
          echo "LIBOQS_USE_OPENSSL=OFF" >> $env:GITHUB_ENV
          echo "LIBOQS_OPENSSL=OFF" >> $env:GITHUB_ENV
          echo "LIBOQS_NO_OPENSSL=1" >> $env:GITHUB_ENV
          echo "OQS_USE_OPENSSL=OFF" >> $env:GITHUB_ENV
          echo "OQS_USE_OPENSSL=0" >> $env:GITHUB_ENV
          echo "LIBOQS_DIST_BUILD=ON" >> $env:GITHUB_ENV
          echo "CMAKE_ARGS=-DOQS_USE_OPENSSL=OFF -DCMAKE_DISABLE_FIND_PACKAGE_OpenSSL=ON -DOQS_DIST_BUILD=ON -DOQS_BUILD_ONLY_LIB=ON" >> $env:GITHUB_ENV
          # Set legacy vars as well (some oqs-sys versions read these)
          echo "OQS_SYS_CMAKE_ARGS=-DOQS_USE_OPENSSL=OFF -DCMAKE_DISABLE_FIND_PACKAGE_OpenSSL=ON -DOQS_DIST_BUILD=ON" >> $env:GITHUB_ENV
          echo "OQS_USE_OPENSSL=OFF" >> $env:GITHUB_ENV

      - name: Debug oqs-sys env
        shell: pwsh
        run: |
          echo "LIBOQS_CMAKE_ARGS=$env:LIBOQS_CMAKE_ARGS"
          echo "LIBOQS_USE_OPENSSL=$env:LIBOQS_USE_OPENSSL"
          echo "LIBOQS_OPENSSL=$env:LIBOQS_OPENSSL"
          echo "LIBOQS_NO_OPENSSL=$env:LIBOQS_NO_OPENSSL"
          echo "CMAKE_ARGS=$env:CMAKE_ARGS"
          echo "OQS_SYS_CMAKE_ARGS=$env:OQS_SYS_CMAKE_ARGS"
          echo "OQS_USE_OPENSSL=$env:OQS_USE_OPENSSL"

      - name: Cache cargo and target
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
          key: ${{ runner.os }}-cargo-v4-noossl-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-v4-noossl-

      - name: Cargo clean
        run: cargo clean

      - name: Build (release, static CRT, no-default-features)
        run: cargo build --locked --release --verbose --no-default-features
        env:
          RUSTFLAGS: -C target-feature=+crt-static
          # Redundant env in the build step to guarantee oqs-sys sees them
          LIBOQS_CMAKE_ARGS: -DOQS_USE_OPENSSL=OFF -DCMAKE_DISABLE_FIND_PACKAGE_OpenSSL=ON -DOQS_DIST_BUILD=ON -DOQS_BUILD_ONLY_LIB=ON -DOQS_ENABLE_SIG_ML_DSA=ON -DOQS_ENABLE_KEM_ML_KEM=ON
          LIBOQS_NO_PKG_CONFIG: "1"
          LIBOQS_STATIC: "1"
          LIBOQS_USE_OPENSSL: "OFF"
          LIBOQS_OPENSSL: "OFF"
          LIBOQS_NO_OPENSSL: "1"
          OQS_SYS_CMAKE_ARGS: -DOQS_USE_OPENSSL=OFF -DCMAKE_DISABLE_FIND_PACKAGE_OpenSSL=ON -DOQS_DIST_BUILD=ON
          OQS_USE_OPENSSL: "OFF"
          CMAKE_ARGS: -DOQS_USE_OPENSSL=OFF -DCMAKE_DISABLE_FIND_PACKAGE_OpenSSL=ON -DOQS_DIST_BUILD=ON -DOQS_BUILD_ONLY_LIB=ON

      - name: Smoke test executable
        shell: pwsh
        run: |
          & target/release/unchained.exe --version

      - name: Prepare release assets
        shell: pwsh
        run: |
          # Verify binaries exist
          Get-ChildItem -Path target/release -Filter *.exe
          # Staging directory for flattened zip contents
          $dist = "dist/windows"
          if (Test-Path $dist) { Remove-Item $dist -Recurse -Force }
          New-Item -ItemType Directory -Path $dist | Out-Null
          # Copy artifacts into staging dir (flattened)
          Copy-Item -Path target/release/unchained.exe -Destination "$dist/unchained.exe" -Force
          Copy-Item -Path target/release/inspect_db.exe -Destination "$dist/inspect_db.exe" -Force
          Copy-Item -Path config.toml -Destination "$dist/config.toml" -Force
          Copy-Item -Path README.md -Destination "$dist/README.md" -Force
          # Normalize .bat to CRLF to ensure it runs on Windows
          $bat = Get-Content -Raw -Path unchained-run.bat
          $bat = $bat -replace "`n", "`r`n"
          Set-Content -Path "$dist/unchained-run.bat" -Value $bat -NoNewline -Encoding ascii
          # Bundle a zip with exe + config + README + launcher (flattened)
          $zipPath = "target/release/unchained-windows-x86_64.zip"
          if (Test-Path $zipPath) { Remove-Item $zipPath -Force }
          Compress-Archive -Path "$dist/*" -DestinationPath $zipPath

      - name: Smoke test .bat launcher
        shell: cmd
        run: |
          cd /d %GITHUB_WORKSPACE%\dist\windows && unchained-run.bat --version

      - name: Create Release and Upload Assets (.exe)
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ steps.meta.outputs.tag }}
          name: ${{ steps.meta.outputs.name }}
          target_commitish: ${{ github.sha }}
          files: |
            target/release/unchained.exe
            target/release/inspect_db.exe
            target/release/unchained-windows-x86_64.zip
            dist/windows/unchained-run.bat
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Compute release metadata
        id: meta
        shell: pwsh
        run: |
          $short = $env:GITHUB_SHA.Substring(0,7)
          "tag=auto-main-$short" | Out-File -FilePath $env:GITHUB_OUTPUT -Encoding utf8 -Append
          "name=Main build $short" | Out-File -FilePath $env:GITHUB_OUTPUT -Encoding utf8 -Append

      